{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isArray, isNull, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreDocumentSnapshot from \"./FirestoreDocumentSnapshot\";\nimport FirestoreFieldPath, { fromDotSeparatedString } from \"./FirestoreFieldPath\";\nimport FirestoreQuerySnapshot from \"./FirestoreQuerySnapshot\";\nimport { parseSnapshotArgs } from \"./utils\";\nvar _id = 0;\n\nvar FirestoreQuery = function () {\n  function FirestoreQuery(firestore, collectionPath, modifiers, queryName) {\n    _classCallCheck(this, FirestoreQuery);\n\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n\n  _createClass(FirestoreQuery, [{\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }, {\n    key: \"_handleQueryCursor\",\n    value: function _handleQueryCursor(cursor, docOrField, fields) {\n      var modifiers = this._modifiers._copy();\n\n      if (isUndefined(docOrField)) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Expected a DocumentSnapshot or list of field values but got undefined.\");\n      }\n\n      if (docOrField instanceof FirestoreDocumentSnapshot) {\n        if (fields.length > 0) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.\");\n        }\n\n        var documentSnapshot = docOrField;\n\n        if (!documentSnapshot.exists) {\n          throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Can't use a DocumentSnapshot that doesn't exist.\");\n        }\n\n        var currentOrders = modifiers.orders;\n        var values = [];\n\n        for (var i = 0; i < currentOrders.length; i++) {\n          var order = currentOrders[i];\n\n          if (order.fieldPath === '__name__') {\n            continue;\n          }\n\n          var value = documentSnapshot.get(order.fieldPath);\n\n          if (value === undefined) {\n            throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) You are trying to start or end a query using a document for which the field '\" + order.fieldPath + \"' (used as the orderBy) does not exist.\");\n          }\n\n          values.push(value);\n        }\n\n        if (modifiers._orders.length) {\n          var lastOrder = modifiers._orders[modifiers._orders.length - 1];\n\n          if (lastOrder.fieldPath !== '__name__') {\n            modifiers._orders.push({\n              fieldPath: '__name__',\n              direction: lastOrder.direction\n            });\n          }\n        } else {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: 'ASCENDING'\n          });\n        }\n\n        if (this._modifiers.isCollectionGroupQuery()) {\n          values.push(documentSnapshot.ref.path);\n        } else {\n          values.push(documentSnapshot.id);\n        }\n\n        return modifiers.setFieldsCursor(cursor, values);\n      }\n\n      var allFields = [docOrField].concat(fields);\n\n      if (allFields.length > modifiers.orders.length) {\n        throw new Error(\"firebase.firestore().collection().\" + cursor + \"(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.\");\n      }\n\n      return modifiers.setFieldsCursor(cursor, allFields);\n    }\n  }, {\n    key: \"endAt\",\n    value: function endAt(docOrField) {\n      for (var _len = arguments.length, fields = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        fields[_key - 1] = arguments[_key];\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"endBefore\",\n    value: function endBefore(docOrField) {\n      for (var _len2 = arguments.length, fields = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        fields[_key2 - 1] = arguments[_key2];\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('endBefore', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n\n      if (!isUndefined(options) && !isObject(options)) {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' must be an object is provided.\");\n      }\n\n      if (options && options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        throw new Error(\"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\");\n      }\n\n      if (!isUndefined(this._queryName)) {\n        return this._firestore.native.namedQueryGet(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n          return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n        });\n      }\n\n      this._modifiers.validatelimitToLast();\n\n      return this._firestore.native.collectionGet(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, options).then(function (data) {\n        return new FirestoreQuerySnapshot(_this._firestore, _this, data);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreQuery)) {\n        throw new Error(\"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\");\n      }\n\n      if (this.firestore.app.name !== other.firestore.app.name || this._modifiers.type !== other._modifiers.type || this._modifiers.filters.length !== other._modifiers.filters.length || this._modifiers.orders.length !== other._modifiers.orders.length || this._collectionPath.relativeName !== other._collectionPath.relativeName || Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length) {\n        return false;\n      }\n\n      if (JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) || JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) || JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      if (this._modifiers.isValidLimit(_limit)) {\n        throw new Error(\"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\");\n      }\n\n      var modifiers = this._modifiers._copy().limit(_limit);\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(_limitToLast) {\n      if (this._modifiers.isValidLimitToLast(_limitToLast)) {\n        throw new Error(\"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\");\n      }\n\n      var modifiers = this._modifiers._copy().limitToLast(_limitToLast);\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot() {\n      var _this2 = this;\n\n      var snapshotListenOptions;\n      var callback;\n      var onNext;\n      var onError;\n\n      this._modifiers.validatelimitToLast();\n\n      try {\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        var options = parseSnapshotArgs(args);\n        snapshotListenOptions = options.snapshotListenOptions;\n        callback = options.callback;\n        onNext = options.onNext;\n        onError = options.onError;\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().onSnapshot(*) \" + e.message);\n      }\n\n      function handleSuccess(querySnapshot) {\n        callback(querySnapshot, null);\n        onNext(querySnapshot);\n      }\n\n      function handleError(error) {\n        callback(null, error);\n        onError(error);\n      }\n\n      var listenerId = _id++;\n\n      var onSnapshotSubscription = this._firestore.emitter.addListener(this._firestore.eventNameForApp(\"firestore_collection_sync_event:\" + listenerId), function (event) {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          var querySnapshot = new FirestoreQuerySnapshot(_this2._firestore, _this2, event.body.snapshot);\n          handleSuccess(querySnapshot);\n        }\n      });\n\n      var unsubscribe = function unsubscribe() {\n        onSnapshotSubscription.remove();\n\n        _this2._firestore.native.collectionOffSnapshot(listenerId);\n      };\n\n      if (!isUndefined(this._queryName)) {\n        this._firestore.native.namedQueryOnSnapshot(this._queryName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      } else {\n        this._firestore.native.collectionOnSnapshot(this._collectionPath.relativeName, this._modifiers.type, this._modifiers.filters, this._modifiers.orders, this._modifiers.options, listenerId, snapshotListenOptions);\n      }\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\");\n      }\n\n      var path;\n\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore().collection().orderBy(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n\n      if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n        throw new Error(\"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\");\n      }\n\n      if (this._modifiers.hasStart()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().');\n      }\n\n      if (this._modifiers.hasEnd()) {\n        throw new Error('firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().');\n      }\n\n      var modifiers = this._modifiers._copy().orderBy(path, directionStr);\n\n      try {\n        modifiers.validateOrderBy();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().orderBy() \" + e.message);\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }, {\n    key: \"startAfter\",\n    value: function startAfter(docOrField) {\n      for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        fields[_key4 - 1] = arguments[_key4];\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAfter', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(docOrField) {\n      for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        fields[_key5 - 1] = arguments[_key5];\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, this._handleQueryCursor('startAt', docOrField, fields), this._queryName);\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' must be a string or instance of FieldPath.\");\n      }\n\n      var path;\n\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore().collection().where(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n\n      if (!this._modifiers.isValidOperator(opStr)) {\n        throw new Error(\"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\");\n      }\n\n      if (isUndefined(value)) {\n        throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\");\n      }\n\n      if (isNull(value) && !this._modifiers.isEqualOperator(opStr)) {\n        throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\");\n      }\n\n      if (this._modifiers.isInOperator(opStr)) {\n        if (!isArray(value) || !value.length) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '\" + opStr + \"' filters.\");\n        }\n\n        if (value.length > 10) {\n          throw new Error(\"firebase.firestore().collection().where(_, _, *) 'value' is invalid. '\" + opStr + \"' filters support a maximum of 10 elements in the value array.\");\n        }\n      }\n\n      var modifiers = this._modifiers._copy().where(path, opStr, value);\n\n      try {\n        modifiers.validateWhere();\n      } catch (e) {\n        throw new Error(\"firebase.firestore().collection().where() \" + e.message);\n      }\n\n      return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n    }\n  }]);\n\n  return FirestoreQuery;\n}();\n\nexport { FirestoreQuery as default };","map":{"version":3,"names":["isArray","isNull","isObject","isString","isUndefined","NativeError","FirestoreDocumentSnapshot","FirestoreFieldPath","fromDotSeparatedString","FirestoreQuerySnapshot","parseSnapshotArgs","_id","FirestoreQuery","firestore","collectionPath","modifiers","queryName","_firestore","_collectionPath","_modifiers","_queryName","cursor","docOrField","fields","_copy","Error","length","documentSnapshot","exists","currentOrders","orders","values","i","order","fieldPath","value","get","undefined","push","_orders","lastOrder","direction","isCollectionGroupQuery","ref","path","id","setFieldsCursor","allFields","concat","_handleQueryCursor","options","source","native","namedQueryGet","type","filters","then","data","validatelimitToLast","collectionGet","relativeName","other","app","name","Object","keys","JSON","stringify","limit","isValidLimit","limitToLast","isValidLimitToLast","snapshotListenOptions","callback","onNext","onError","args","e","message","handleSuccess","querySnapshot","handleError","error","listenerId","onSnapshotSubscription","emitter","addListener","eventNameForApp","event","body","fromEvent","snapshot","unsubscribe","remove","collectionOffSnapshot","namedQueryOnSnapshot","collectionOnSnapshot","directionStr","isValidDirection","hasStart","hasEnd","orderBy","validateOrderBy","opStr","isValidOperator","isEqualOperator","isInOperator","where","validateWhere"],"sources":["/Users/denisaolimpia/Desktop/E-H-eroes-/mobile-app/node_modules/@react-native-firebase/firestore/lib/FirestoreQuery.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isArray,\n  isNull,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport FirestoreDocumentSnapshot from './FirestoreDocumentSnapshot';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestoreQuerySnapshot from './FirestoreQuerySnapshot';\nimport { parseSnapshotArgs } from './utils';\n\nlet _id = 0;\n\nexport default class FirestoreQuery {\n  constructor(firestore, collectionPath, modifiers, queryName) {\n    this._firestore = firestore;\n    this._collectionPath = collectionPath;\n    this._modifiers = modifiers;\n    this._queryName = queryName;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  _handleQueryCursor(cursor, docOrField, fields) {\n    const modifiers = this._modifiers._copy();\n\n    if (isUndefined(docOrField)) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Expected a DocumentSnapshot or list of field values but got undefined.`,\n      );\n    }\n\n    // Handles cases where the first arg is a DocumentSnapshot\n    if (docOrField instanceof FirestoreDocumentSnapshot) {\n      if (fields.length > 0) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Too many arguments provided. Expected DocumentSnapshot or list of field values.`,\n        );\n      }\n\n      const documentSnapshot = docOrField;\n\n      if (!documentSnapshot.exists) {\n        throw new Error(\n          `firebase.firestore().collection().${cursor}(*) Can't use a DocumentSnapshot that doesn't exist.`,\n        );\n      }\n\n      const currentOrders = modifiers.orders;\n\n      const values = [];\n\n      for (let i = 0; i < currentOrders.length; i++) {\n        const order = currentOrders[i];\n        //skip if fieldPath is '__name__'\n        if (order.fieldPath === '__name__') {\n          continue;\n        }\n\n        const value = documentSnapshot.get(order.fieldPath);\n\n        if (value === undefined) {\n          throw new Error(\n            `firebase.firestore().collection().${cursor}(*) You are trying to start or end a query using a document for which the field '${order.fieldPath}' (used as the orderBy) does not exist.`,\n          );\n        }\n\n        values.push(value);\n      }\n\n      // Based on https://github.com/invertase/react-native-firebase/issues/2854#issuecomment-552986650\n      if (modifiers._orders.length) {\n        const lastOrder = modifiers._orders[modifiers._orders.length - 1];\n        //push '__name__' field only if not present already\n        if (lastOrder.fieldPath !== '__name__') {\n          modifiers._orders.push({\n            fieldPath: '__name__',\n            direction: lastOrder.direction,\n          });\n        }\n      } else {\n        modifiers._orders.push({\n          fieldPath: '__name__',\n          direction: 'ASCENDING',\n        });\n      }\n\n      if (this._modifiers.isCollectionGroupQuery()) {\n        values.push(documentSnapshot.ref.path);\n      } else {\n        values.push(documentSnapshot.id);\n      }\n\n      return modifiers.setFieldsCursor(cursor, values);\n    }\n\n    /**\n     * Assumes list of field values to query by. Orders must be of equal length.\n     */\n\n    const allFields = [docOrField].concat(fields);\n\n    if (allFields.length > modifiers.orders.length) {\n      throw new Error(\n        `firebase.firestore().collection().${cursor}(*) Too many arguments provided. The number of arguments must be less than or equal to the number of orderBy() clauses.`,\n      );\n    }\n\n    return modifiers.setFieldsCursor(cursor, allFields);\n  }\n\n  endAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  endBefore(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('endBefore', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  get(options) {\n    if (!isUndefined(options) && !isObject(options)) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' must be an object is provided.\",\n      );\n    }\n\n    if (\n      options &&\n      options.source &&\n      options.source !== 'default' &&\n      options.source !== 'server' &&\n      options.source !== 'cache'\n    ) {\n      throw new Error(\n        \"firebase.firestore().collection().get(*) 'options' GetOptions.source must be one of 'default', 'server' or 'cache'.\",\n      );\n    }\n\n    if (!isUndefined(this._queryName)) {\n      return this._firestore.native\n        .namedQueryGet(\n          this._queryName,\n          this._modifiers.type,\n          this._modifiers.filters,\n          this._modifiers.orders,\n          this._modifiers.options,\n          options,\n        )\n        .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n    }\n\n    this._modifiers.validatelimitToLast();\n\n    return this._firestore.native\n      .collectionGet(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        options,\n      )\n      .then(data => new FirestoreQuerySnapshot(this._firestore, this, data));\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreQuery)) {\n      throw new Error(\n        \"firebase.firestore().collection().isEqual(*) 'other' expected a Query instance.\",\n      );\n    }\n\n    // Carry out lightweight checks first\n    if (\n      this.firestore.app.name !== other.firestore.app.name ||\n      this._modifiers.type !== other._modifiers.type ||\n      this._modifiers.filters.length !== other._modifiers.filters.length ||\n      this._modifiers.orders.length !== other._modifiers.orders.length ||\n      this._collectionPath.relativeName !== other._collectionPath.relativeName ||\n      Object.keys(this._modifiers.options).length !== Object.keys(other._modifiers.options).length\n    ) {\n      return false;\n    }\n\n    // Carry out potentially expensive checks\n    // noinspection RedundantIfStatementJS\n    if (\n      JSON.stringify(this._modifiers.filters) !== JSON.stringify(other._modifiers.filters) ||\n      JSON.stringify(this._modifiers.orders) !== JSON.stringify(other._modifiers.orders) ||\n      JSON.stringify(this._modifiers.options) !== JSON.stringify(other._modifiers.options)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  limit(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.firestore().collection().limit(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limit(limit);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  limitToLast(limitToLast) {\n    if (this._modifiers.isValidLimitToLast(limitToLast)) {\n      throw new Error(\n        \"firebase.firestore().collection().limitToLast(*) 'limitToLast' must be a positive integer value.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().limitToLast(limitToLast);\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  onSnapshot(...args) {\n    let snapshotListenOptions;\n    let callback;\n    let onNext;\n    let onError;\n\n    this._modifiers.validatelimitToLast();\n\n    try {\n      const options = parseSnapshotArgs(args);\n      snapshotListenOptions = options.snapshotListenOptions;\n      callback = options.callback;\n      onNext = options.onNext;\n      onError = options.onError;\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().onSnapshot(*) ${e.message}`);\n    }\n\n    function handleSuccess(querySnapshot) {\n      callback(querySnapshot, null);\n      onNext(querySnapshot);\n    }\n\n    function handleError(error) {\n      callback(null, error);\n      onError(error);\n    }\n\n    const listenerId = _id++;\n\n    const onSnapshotSubscription = this._firestore.emitter.addListener(\n      this._firestore.eventNameForApp(`firestore_collection_sync_event:${listenerId}`),\n      event => {\n        if (event.body.error) {\n          handleError(NativeError.fromEvent(event.body.error, 'firestore'));\n        } else {\n          const querySnapshot = new FirestoreQuerySnapshot(\n            this._firestore,\n            this,\n            event.body.snapshot,\n          );\n          handleSuccess(querySnapshot);\n        }\n      },\n    );\n\n    const unsubscribe = () => {\n      onSnapshotSubscription.remove();\n      this._firestore.native.collectionOffSnapshot(listenerId);\n    };\n\n    if (!isUndefined(this._queryName)) {\n      this._firestore.native.namedQueryOnSnapshot(\n        this._queryName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    } else {\n      this._firestore.native.collectionOnSnapshot(\n        this._collectionPath.relativeName,\n        this._modifiers.type,\n        this._modifiers.filters,\n        this._modifiers.orders,\n        this._modifiers.options,\n        listenerId,\n        snapshotListenOptions,\n      );\n    }\n\n    return unsubscribe;\n  }\n\n  orderBy(fieldPath, directionStr) {\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(*) 'fieldPath' must be a string or instance of FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore().collection().orderBy(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      path = fieldPath;\n    }\n\n    if (!isUndefined(directionStr) && !this._modifiers.isValidDirection(directionStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().orderBy(_, *) 'directionStr' must be one of 'asc' or 'desc'.\",\n      );\n    }\n\n    if (this._modifiers.hasStart()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call startAt() or startAfter() before calling orderBy().',\n      );\n    }\n\n    if (this._modifiers.hasEnd()) {\n      throw new Error(\n        'firebase.firestore().collection().orderBy() Invalid query. You must not call endAt() or endBefore() before calling orderBy().',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderBy(path, directionStr);\n\n    try {\n      modifiers.validateOrderBy();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().orderBy() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n\n  startAfter(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAfter', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  startAt(docOrField, ...fields) {\n    return new FirestoreQuery(\n      this._firestore,\n      this._collectionPath,\n      this._handleQueryCursor('startAt', docOrField, fields),\n      this._queryName,\n    );\n  }\n\n  where(fieldPath, opStr, value) {\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(*) 'fieldPath' must be a string or instance of FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore().collection().where(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      path = fieldPath;\n    }\n\n    if (!this._modifiers.isValidOperator(opStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, *) 'opStr' is invalid. Expected one of '==', '>', '>=', '<', '<=', '!=', 'array-contains', 'not-in', 'array-contains-any' or 'in'.\",\n      );\n    }\n\n    if (isUndefined(value)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, _, *) 'value' argument expected.\",\n      );\n    }\n\n    if (isNull(value) && !this._modifiers.isEqualOperator(opStr)) {\n      throw new Error(\n        \"firebase.firestore().collection().where(_, _, *) 'value' is invalid. You can only perform equals comparisons on null\",\n      );\n    }\n\n    if (this._modifiers.isInOperator(opStr)) {\n      if (!isArray(value) || !value.length) {\n        throw new Error(\n          `firebase.firestore().collection().where(_, _, *) 'value' is invalid. A non-empty array is required for '${opStr}' filters.`,\n        );\n      }\n\n      if (value.length > 10) {\n        throw new Error(\n          `firebase.firestore().collection().where(_, _, *) 'value' is invalid. '${opStr}' filters support a maximum of 10 elements in the value array.`,\n        );\n      }\n    }\n\n    const modifiers = this._modifiers._copy().where(path, opStr, value);\n\n    try {\n      modifiers.validateWhere();\n    } catch (e) {\n      throw new Error(`firebase.firestore().collection().where() ${e.message}`);\n    }\n\n    return new FirestoreQuery(this._firestore, this._collectionPath, modifiers, this._queryName);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}