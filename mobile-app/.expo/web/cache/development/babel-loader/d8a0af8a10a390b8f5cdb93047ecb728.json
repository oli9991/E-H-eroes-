{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { isArray, isBoolean, isDate, isNull, isNumber, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from \"../FirestoreBlob\";\nimport { DOCUMENT_ID } from \"../FirestoreFieldPath\";\nimport FirestoreGeoPoint from \"../FirestoreGeoPoint\";\nimport FirestorePath from \"../FirestorePath\";\nimport FirestoreTimestamp from \"../FirestoreTimestamp\";\nimport { getTypeMapInt, getTypeMapName } from \"./typemap\";\nvar FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\nvar FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\nexport function buildNativeMap(data, ignoreUndefined) {\n  var nativeData = {};\n\n  if (data) {\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (typeof data[key] === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n\n      var typeMap = generateNativeData(data[key], ignoreUndefined);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n\n  return nativeData;\n}\nexport function buildNativeArray(array, ignoreUndefined) {\n  var nativeArray = [];\n\n  if (array) {\n    for (var i = 0; i < array.length; i++) {\n      var value = array[i];\n\n      if (typeof value === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n\n      var typeMap = generateNativeData(value, ignoreUndefined);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n\n  return nativeArray;\n}\nexport function generateNativeData(value, ignoreUndefined) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    if (value === 0 && 1 / value === -Infinity) {\n      return getTypeMapInt('negativeZero');\n    }\n\n    if (Number.isSafeInteger(value)) {\n      return getTypeMapInt('integer', value);\n    }\n\n    return getTypeMapInt('double', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value, ignoreUndefined));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    if (isDate(value)) {\n      var timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value, ignoreUndefined));\n  }\n\n  console.warn(\"Unknown data type received \" + value);\n  return getTypeMapInt('unknown');\n}\nexport function parseNativeMap(firestore, nativeData) {\n  var data;\n\n  if (nativeData) {\n    data = {};\n    var entries = Object.entries(nativeData);\n\n    for (var i = 0; i < entries.length; i++) {\n      var _entries$i = _slicedToArray(entries[i], 2),\n          key = _entries$i[0],\n          typeArray = _entries$i[1];\n\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n\n  return data;\n}\nexport function parseNativeArray(firestore, nativeArray) {\n  var array = [];\n\n  if (nativeArray) {\n    for (var i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n\n  return array;\n}\nexport function parseNativeData(firestore, nativeArray) {\n  var _nativeArray = _slicedToArray(nativeArray, 2),\n      int = _nativeArray[0],\n      value = _nativeArray[1];\n\n  var type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n\n    case '-infinity':\n      return -Infinity;\n\n    case 'infinity':\n      return Infinity;\n\n    case 'null':\n      return null;\n\n    case 'booleanTrue':\n      return true;\n\n    case 'booleanFalse':\n      return false;\n\n    case 'double':\n    case 'integer':\n    case 'negativeZero':\n    case 'string':\n      return value;\n\n    case 'stringEmpty':\n      return '';\n\n    case 'array':\n      return parseNativeArray(firestore, value);\n\n    case 'object':\n      return parseNativeMap(firestore, value);\n\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n\n    default:\n      console.warn(\"Unknown data type received from native channel: \" + type);\n      return value;\n  }\n}","map":{"version":3,"names":["isArray","isBoolean","isDate","isNull","isNumber","isObject","isString","isUndefined","FirestoreBlob","DOCUMENT_ID","FirestoreGeoPoint","FirestorePath","FirestoreTimestamp","getTypeMapInt","getTypeMapName","FirestoreDocumentReference","provideDocumentReferenceClass","documentReference","FirestoreFieldValue","provideFieldValueClass","fieldValue","buildNativeMap","data","ignoreUndefined","nativeData","keys","Object","i","length","key","Error","typeMap","generateNativeData","buildNativeArray","array","nativeArray","value","push","Number","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","Infinity","isSafeInteger","path","latitude","longitude","timestamp","fromDate","seconds","nanoseconds","toBase64","_type","_elements","console","warn","parseNativeMap","firestore","entries","typeArray","parseNativeData","parseNativeArray","int","type","NaN","fromName","fromBase64String"],"sources":["/Users/denisaolimpia/Desktop/E-H-eroes-/mobile-app/node_modules/@react-native-firebase/firestore/lib/utils/serialize.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isArray,\n  isBoolean,\n  isDate,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from '../FirestoreBlob';\nimport { DOCUMENT_ID } from '../FirestoreFieldPath';\nimport FirestoreGeoPoint from '../FirestoreGeoPoint';\nimport FirestorePath from '../FirestorePath';\nimport FirestoreTimestamp from '../FirestoreTimestamp';\nimport { getTypeMapInt, getTypeMapName } from './typemap';\n\n// To avoid React Native require cycle warnings\nlet FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\n\nlet FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\n\n/**\n *\n * @param data\n * @param ignoreUndefined\n */\nexport function buildNativeMap(data, ignoreUndefined) {\n  const nativeData = {};\n  if (data) {\n    const keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n\n      if (typeof data[key] === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n\n      const typeMap = generateNativeData(data[key], ignoreUndefined);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n  return nativeData;\n}\n\n/**\n *\n * @param array\n * @returns {Array}\n */\nexport function buildNativeArray(array, ignoreUndefined) {\n  const nativeArray = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      if (typeof value === 'undefined') {\n        if (!ignoreUndefined) {\n          throw new Error('Unsupported field value: undefined');\n        } else {\n          continue;\n        }\n      }\n      const typeMap = generateNativeData(value, ignoreUndefined);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n  return nativeArray;\n}\n\n/**\n * Creates a lightweight array of an object value to be sent over the bridge.\n * The type is convered to an integer which is handled on the native side\n * to create the correct types.\n *\n * Example: [7, 'some string'];\n *\n * @param value\n * @param ignoreUndefined\n * @returns {*}\n */\nexport function generateNativeData(value, ignoreUndefined) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    // mirror the JS SDK's integer detection algorithm\n    // https://github.com/firebase/firebase-js-sdk/blob/086df7c7e0299cedd9f3cff9080f46ca25cab7cd/packages/firestore/src/remote/number_serializer.ts#L56\n    if (value === 0 && 1 / value === -Infinity) {\n      return getTypeMapInt('negativeZero');\n    }\n    if (Number.isSafeInteger(value)) {\n      return getTypeMapInt('integer', value);\n    }\n    return getTypeMapInt('double', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value, ignoreUndefined));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    // Handle Date objects are Timestamps as per web sdk\n    if (isDate(value)) {\n      const timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value, ignoreUndefined));\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unknown data type received ${value}`);\n\n  return getTypeMapInt('unknown');\n}\n\n/**\n *\n * @param firestore\n * @param nativeData\n */\nexport function parseNativeMap(firestore, nativeData) {\n  let data;\n  if (nativeData) {\n    data = {};\n    const entries = Object.entries(nativeData);\n    for (let i = 0; i < entries.length; i++) {\n      const [key, typeArray] = entries[i];\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n  return data;\n}\n\n/**\n *\n * @param firestore\n * @param nativeArray\n * @returns {Array}\n */\nexport function parseNativeArray(firestore, nativeArray) {\n  const array = [];\n  if (nativeArray) {\n    for (let i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n  return array;\n}\n\n/**\n * Data returned from native is constructed in the same way it sent to keep\n * payloads over the bridge as small as possible. The index matches to a type\n * which is then created on JS land.\n *\n * Example: [7, 'string']\n *\n * @param firestore\n * @param nativeArray\n * @returns *\n */\nexport function parseNativeData(firestore, nativeArray) {\n  const [int, value] = nativeArray;\n  const type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n    case '-infinity':\n      return -Infinity;\n    case 'infinity':\n      return Infinity;\n    case 'null':\n      return null;\n    case 'booleanTrue':\n      return true;\n    case 'booleanFalse':\n      return false;\n    case 'double':\n    case 'integer':\n    case 'negativeZero':\n    case 'string':\n      return value;\n    case 'stringEmpty':\n      return '';\n    case 'array':\n      return parseNativeArray(firestore, value);\n    case 'object':\n      return parseNativeMap(firestore, value);\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`Unknown data type received from native channel: ${type}`);\n      return value;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}