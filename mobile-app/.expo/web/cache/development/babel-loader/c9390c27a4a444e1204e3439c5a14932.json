{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, { provideDocumentSnapshotClass } from \"./FirestoreDocumentReference\";\nimport FirestoreFieldPath, { fromDotSeparatedString } from \"./FirestoreFieldPath\";\nimport FirestorePath from \"./FirestorePath\";\nimport FirestoreSnapshotMetadata from \"./FirestoreSnapshotMetadata\";\nimport { extractFieldPathData } from \"./utils\";\nimport { parseNativeMap } from \"./utils/serialize\";\n\nvar FirestoreDocumentSnapshot = function () {\n  function FirestoreDocumentSnapshot(firestore, nativeData) {\n    _classCallCheck(this, FirestoreDocumentSnapshot);\n\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  _createClass(FirestoreDocumentSnapshot, [{\n    key: \"exists\",\n    get: function get() {\n      return this._exists;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._ref.id;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._metadata;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return this._ref;\n    }\n  }, {\n    key: \"data\",\n    value: function data() {\n      return this._data;\n    }\n  }, {\n    key: \"get\",\n    value: function get(fieldPath) {\n      if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\");\n      }\n\n      var path;\n\n      if (isString(fieldPath)) {\n        try {\n          path = fromDotSeparatedString(fieldPath);\n        } catch (e) {\n          throw new Error(\"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' \" + e.message + \".\");\n        }\n      } else {\n        path = fieldPath;\n      }\n\n      return extractFieldPathData(this._data, path._segments);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreDocumentSnapshot)) {\n        throw new Error(\"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\");\n      }\n\n      if (this.exists !== other.exists || !this.metadata.isEqual(other.metadata) || !this.ref.isEqual(other.ref)) {\n        return false;\n      }\n\n      var thisData = JSON.stringify(this.data());\n      var otherData = JSON.stringify(other.data());\n      return thisData === otherData;\n    }\n  }]);\n\n  return FirestoreDocumentSnapshot;\n}();\n\nexport { FirestoreDocumentSnapshot as default };\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);","map":{"version":3,"names":["isString","FirestoreDocumentReference","provideDocumentSnapshotClass","FirestoreFieldPath","fromDotSeparatedString","FirestorePath","FirestoreSnapshotMetadata","extractFieldPathData","parseNativeMap","FirestoreDocumentSnapshot","firestore","nativeData","_data","data","_metadata","metadata","_ref","fromName","path","_exists","exists","id","fieldPath","Error","e","message","_segments","other","isEqual","ref","thisData","JSON","stringify","otherData"],"sources":["/Users/denisaolimpia/Desktop/E-H-eroes-/mobile-app/node_modules/@react-native-firebase/firestore/lib/FirestoreDocumentSnapshot.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference, {\n  provideDocumentSnapshotClass,\n} from './FirestoreDocumentReference';\nimport FirestoreFieldPath, { fromDotSeparatedString } from './FirestoreFieldPath';\nimport FirestorePath from './FirestorePath';\nimport FirestoreSnapshotMetadata from './FirestoreSnapshotMetadata';\nimport { extractFieldPathData } from './utils';\nimport { parseNativeMap } from './utils/serialize';\n\nexport default class FirestoreDocumentSnapshot {\n  constructor(firestore, nativeData) {\n    this._data = parseNativeMap(firestore, nativeData.data);\n    this._metadata = new FirestoreSnapshotMetadata(nativeData.metadata);\n    this._ref = new FirestoreDocumentReference(firestore, FirestorePath.fromName(nativeData.path));\n    this._exists = nativeData.exists;\n  }\n\n  get exists() {\n    return this._exists;\n  }\n\n  get id() {\n    return this._ref.id;\n  }\n\n  get metadata() {\n    return this._metadata;\n  }\n\n  get ref() {\n    return this._ref;\n  }\n\n  data() {\n    // TODO: ehesp: Figure out how to handle this.\n    // const snapshotOptions = {};\n    //\n    // if (!isUndefined(options)) {\n    //   if (!isObject(options)) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options' expected an object if defined.`,\n    //     );\n    //   }\n    //\n    //   if (\n    //     options.serverTimestamps &&\n    //     options.serverTimestamps !== 'estimate' &&\n    //     options.serverTimestamps !== 'previous' &&\n    //     options.serverTimestamps !== 'none'\n    //   ) {\n    //     throw new Error(\n    //       `firebase.firestore() DocumentSnapshot.data(*) 'options.serverTimestamps' expected one of 'estimate', 'previous' or 'none'.`,\n    //     );\n    //   }\n    // }\n\n    return this._data;\n  }\n\n  get(fieldPath) {\n    // TODO: ehesp: How are SnapshotOptions handled?\n\n    if (!isString(fieldPath) && !(fieldPath instanceof FirestoreFieldPath)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' expected type string or FieldPath.\",\n      );\n    }\n\n    let path;\n\n    if (isString(fieldPath)) {\n      try {\n        path = fromDotSeparatedString(fieldPath);\n      } catch (e) {\n        throw new Error(`firebase.firestore() DocumentSnapshot.get(*) 'fieldPath' ${e.message}.`);\n      }\n    } else {\n      // Is already field path\n      path = fieldPath;\n    }\n\n    return extractFieldPathData(this._data, path._segments);\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreDocumentSnapshot)) {\n      throw new Error(\n        \"firebase.firestore() DocumentSnapshot.isEqual(*) 'other' expected a DocumentSnapshot instance.\",\n      );\n    }\n\n    if (\n      this.exists !== other.exists ||\n      !this.metadata.isEqual(other.metadata) ||\n      !this.ref.isEqual(other.ref)\n    ) {\n      return false;\n    }\n\n    const thisData = JSON.stringify(this.data());\n    const otherData = JSON.stringify(other.data());\n\n    return thisData === otherData;\n  }\n}\n\n// To avoid React Native require cycle\nprovideDocumentSnapshotClass(FirestoreDocumentSnapshot);\n"],"mappings":";;AAiBA,SAASA,QAAT,QAAyB,uCAAzB;AACA,OAAOC,0BAAP,IACEC,4BADF;AAGA,OAAOC,kBAAP,IAA6BC,sBAA7B;AACA,OAAOC,aAAP;AACA,OAAOC,yBAAP;AACA,SAASC,oBAAT;AACA,SAASC,cAAT;;IAEqBC,yB;EACnB,mCAAYC,SAAZ,EAAuBC,UAAvB,EAAmC;IAAA;;IACjC,KAAKC,KAAL,GAAaJ,cAAc,CAACE,SAAD,EAAYC,UAAU,CAACE,IAAvB,CAA3B;IACA,KAAKC,SAAL,GAAiB,IAAIR,yBAAJ,CAA8BK,UAAU,CAACI,QAAzC,CAAjB;IACA,KAAKC,IAAL,GAAY,IAAIf,0BAAJ,CAA+BS,SAA/B,EAA0CL,aAAa,CAACY,QAAd,CAAuBN,UAAU,CAACO,IAAlC,CAA1C,CAAZ;IACA,KAAKC,OAAL,GAAeR,UAAU,CAACS,MAA1B;EACD;;;;SAED,eAAa;MACX,OAAO,KAAKD,OAAZ;IACD;;;SAED,eAAS;MACP,OAAO,KAAKH,IAAL,CAAUK,EAAjB;IACD;;;SAED,eAAe;MACb,OAAO,KAAKP,SAAZ;IACD;;;SAED,eAAU;MACR,OAAO,KAAKE,IAAZ;IACD;;;WAED,gBAAO;MAuBL,OAAO,KAAKJ,KAAZ;IACD;;;WAED,aAAIU,SAAJ,EAAe;MAGb,IAAI,CAACtB,QAAQ,CAACsB,SAAD,CAAT,IAAwB,EAAEA,SAAS,YAAYnB,kBAAvB,CAA5B,EAAwE;QACtE,MAAM,IAAIoB,KAAJ,CACJ,6FADI,CAAN;MAGD;;MAED,IAAIL,IAAJ;;MAEA,IAAIlB,QAAQ,CAACsB,SAAD,CAAZ,EAAyB;QACvB,IAAI;UACFJ,IAAI,GAAGd,sBAAsB,CAACkB,SAAD,CAA7B;QACD,CAFD,CAEE,OAAOE,CAAP,EAAU;UACV,MAAM,IAAID,KAAJ,+DAAsEC,CAAC,CAACC,OAAxE,OAAN;QACD;MACF,CAND,MAMO;QAELP,IAAI,GAAGI,SAAP;MACD;;MAED,OAAOf,oBAAoB,CAAC,KAAKK,KAAN,EAAaM,IAAI,CAACQ,SAAlB,CAA3B;IACD;;;WAED,iBAAQC,KAAR,EAAe;MACb,IAAI,EAAEA,KAAK,YAAYlB,yBAAnB,CAAJ,EAAmD;QACjD,MAAM,IAAIc,KAAJ,CACJ,gGADI,CAAN;MAGD;;MAED,IACE,KAAKH,MAAL,KAAgBO,KAAK,CAACP,MAAtB,IACA,CAAC,KAAKL,QAAL,CAAca,OAAd,CAAsBD,KAAK,CAACZ,QAA5B,CADD,IAEA,CAAC,KAAKc,GAAL,CAASD,OAAT,CAAiBD,KAAK,CAACE,GAAvB,CAHH,EAIE;QACA,OAAO,KAAP;MACD;;MAED,IAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe,KAAKnB,IAAL,EAAf,CAAjB;MACA,IAAMoB,SAAS,GAAGF,IAAI,CAACC,SAAL,CAAeL,KAAK,CAACd,IAAN,EAAf,CAAlB;MAEA,OAAOiB,QAAQ,KAAKG,SAApB;IACD;;;;;;SA9FkBxB,yB;AAkGrBP,4BAA4B,CAACO,yBAAD,CAA5B"},"metadata":{},"sourceType":"module"}