{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from \"./FirestoreDocumentReference\";\nimport { parseSetOptions, parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\n\nvar FirestoreWriteBatch = function () {\n  function FirestoreWriteBatch(firestore) {\n    _classCallCheck(this, FirestoreWriteBatch);\n\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n\n  _createClass(FirestoreWriteBatch, [{\n    key: \"_verifyNotCommitted\",\n    value: function _verifyNotCommitted(method) {\n      if (this._committed) {\n        throw new Error(\"firebase.firestore.batch().\" + method + \"(*) A write batch can no longer be used after commit() has been called.\");\n      }\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      this._verifyNotCommitted('commit');\n\n      this._committed = true;\n\n      if (this._writes.length === 0) {\n        return Promise.resolve();\n      }\n\n      return this._firestore.native.documentBatch(this._writes);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef) {\n      this._verifyNotCommitted('delete');\n\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n\n      this._writes.push({\n        path: documentRef.path,\n        type: 'DELETE'\n      });\n\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._verifyNotCommitted('set');\n\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n\n      if (!isObject(data)) {\n        throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n      }\n\n      var setOptions;\n\n      try {\n        setOptions = parseSetOptions(options);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().doc().set(_, *) \" + e.message + \".\");\n      }\n\n      this._writes.push({\n        path: documentRef.path,\n        type: 'SET',\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n        options: setOptions\n      });\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentRef) {\n      this._verifyNotCommitted('update');\n\n      if (!(documentRef instanceof FirestoreDocumentReference)) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\");\n      }\n\n      if (documentRef.firestore.app !== this._firestore.app) {\n        throw new Error(\"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\");\n      }\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length === 0) {\n        throw new Error('firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.');\n      }\n\n      var data;\n\n      try {\n        data = parseUpdateArgs(args);\n      } catch (e) {\n        throw new Error(\"firebase.firestore().batch().update(_, *) \" + e.message);\n      }\n\n      this._writes.push({\n        path: documentRef.path,\n        type: 'UPDATE',\n        data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties)\n      });\n\n      return this;\n    }\n  }]);\n\n  return FirestoreWriteBatch;\n}();\n\nexport { FirestoreWriteBatch as default };","map":{"version":3,"names":["isObject","FirestoreDocumentReference","parseSetOptions","parseUpdateArgs","buildNativeMap","FirestoreWriteBatch","firestore","_firestore","_writes","_committed","method","Error","_verifyNotCommitted","length","Promise","resolve","native","documentBatch","documentRef","app","push","path","type","data","options","setOptions","e","message","_settings","ignoreUndefinedProperties","args"],"sources":["/Users/denisaolimpia/Desktop/E-H-eroes-/mobile-app/node_modules/@react-native-firebase/firestore/lib/FirestoreWriteBatch.js"],"sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isObject } from '@react-native-firebase/app/lib/common';\nimport FirestoreDocumentReference from './FirestoreDocumentReference';\nimport { parseSetOptions, parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\n\nexport default class FirestoreWriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n    this._committed = false;\n  }\n\n  _verifyNotCommitted(method) {\n    if (this._committed) {\n      throw new Error(\n        `firebase.firestore.batch().${method}(*) A write batch can no longer be used after commit() has been called.`,\n      );\n    }\n  }\n\n  commit() {\n    this._verifyNotCommitted('commit');\n    this._committed = true;\n    if (this._writes.length === 0) {\n      return Promise.resolve();\n    }\n    return this._firestore.native.documentBatch(this._writes);\n  }\n\n  delete(documentRef) {\n    this._verifyNotCommitted('delete');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().delete(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'DELETE',\n    });\n\n    return this;\n  }\n\n  set(documentRef, data, options) {\n    this._verifyNotCommitted('set');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().set(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (!isObject(data)) {\n      throw new Error(\"firebase.firestore.batch().set(_, *) 'data' must be an object.\");\n    }\n\n    let setOptions;\n    try {\n      setOptions = parseSetOptions(options);\n    } catch (e) {\n      throw new Error(`firebase.firestore().doc().set(_, *) ${e.message}.`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'SET',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n      options: setOptions,\n    });\n\n    return this;\n  }\n\n  update(documentRef, ...args) {\n    this._verifyNotCommitted('update');\n    if (!(documentRef instanceof FirestoreDocumentReference)) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' expected instance of a DocumentReference.\",\n      );\n    }\n\n    if (documentRef.firestore.app !== this._firestore.app) {\n      throw new Error(\n        \"firebase.firestore.batch().update(*) 'documentRef' provided DocumentReference is from a different Firestore instance.\",\n      );\n    }\n\n    if (args.length === 0) {\n      throw new Error(\n        'firebase.firestore.batch().update(_, *) Invalid arguments. Expected update object or list of key/value pairs.',\n      );\n    }\n\n    let data;\n    try {\n      data = parseUpdateArgs(args);\n    } catch (e) {\n      throw new Error(`firebase.firestore().batch().update(_, *) ${e.message}`);\n    }\n\n    this._writes.push({\n      path: documentRef.path,\n      type: 'UPDATE',\n      data: buildNativeMap(data, this._firestore._settings.ignoreUndefinedProperties),\n    });\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}